# -*- coding: utf-8 -*-
"""TDA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fTE-2RcOrHhbAA2S5nsGFmvQmbLWER4h
"""

import numpy as np
import matplotlib.pyplot as plt

pc = np.load('point cloud.npy')
pc.shape

plt.plot(pc[:,0], pc[:,1], 'o')
plt.axis('equal')
plt.show()

ts = np.random.rand(100)
plt.plot(t1, '-o')

x = ts[:-1:2]
y = ts[1::2]
plt.plot(x,y,'o')

import gudhi as gd

pc = np.array(list(zip(x,y)))
pc.shape

pc[:5]

rc = gd.RipsComplex(points=pc)
st = rc.create_simplex_tree(max_dimension=2)
diag = st.persistence()

gd.plot_persistence_barcode(persistence=diag, legend=True)

gd.plot_persistence_diagram(persistence=diag, legend=True)

rc = gd.RipsComplex(points=pc)
st = rc.create_simplex_tree(max_dimension=2)

st.compute_persistence()
H0 = st.persistence_intervals_in_dimension(0)
H1 = st.persistence_intervals_in_dimension(1)

H0[:5]

plt.plot(H1[:,0], H1[:,1], 'o')

arr5.shape

arr5 = np.loadtxt('0.5.txt')[:200] + 5
arr2 = np.loadtxt('0.2.txt')[:200]
arr8 = np.loadtxt('0.8.txt')[:200] + 10
arr5.shape

plt.plot(arr2)
plt.plot(arr5)
plt.plot(arr8)
plt.xlim(0,200)

x2 = arr2[:-1:2]
y2 = arr2[1::2]
pc2 = np.array(list(zip(x2,y2)))

x5 = arr5[:-1:2]
y5 = arr5[1::2]
pc5 = np.array(list(zip(x5,y5)))

x8 = arr8[:-1:2]
y8 = arr8[1::2]
pc8 = np.array(list(zip(x8,y8)))

rc2 = gd.RipsComplex(points=pc2)
st2 = rc2.create_simplex_tree(max_dimension=2)
diag2 = st2.persistence()

rc5 = gd.RipsComplex(points=pc5)
st5 = rc5.create_simplex_tree(max_dimension=2)
diag5 = st5.persistence()

rc8 = gd.RipsComplex(points=pc8)
st8 = rc8.create_simplex_tree(max_dimension=2)
diag8 = st8.persistence()

fig, ax = plt.subplots(3,2,figsize=(10,15))
gd.plot_persistence_barcode(axes=ax[0][0], persistence=diag2)
gd.plot_persistence_diagram(axes=ax[0][1], persistence=diag2)

gd.plot_persistence_barcode(axes=ax[1][0], persistence=diag5)
gd.plot_persistence_diagram(axes=ax[1][1], persistence=diag5)

gd.plot_persistence_barcode(axes=ax[2][0], persistence=diag8)
gd.plot_persistence_diagram(axes=ax[2][1], persistence=diag8)

fig,ax=plt.subplots(1,3,figsize=(15,5))
ax[0].plot(pc2[:,0],pc2[:,1],'o')
ax[1].plot(pc5[:,0],pc5[:,1],'o')
ax[2].plot(pc8[:,0],pc8[:,1],'o')

from gudhi.representations import BettiCurve, DiagramSelector

H0[-5:]

diags0 = DiagramSelector(use=True, point_type='finite').fit_transform([H0])

BC = BettiCurve(resolution=100).fit_transform(diags0)

BC[0][:5]

plt.plot(BC[0])

"""# Image"""

image = np.random.random((100,100))
plt.imshow(image)

print(image)

cc = gd.CubicalComplex(top_dimensional_cells=image)
cc.compute_persistence()

H0 = cc.persistence_intervals_in_dimension(0)
H1 = cc.persistence_intervals_in_dimension(1)

gd.plot_persistence_diagram(persistence=H0)

gd.plot_persistence_diagram(H1)

mat1 = np.loadtxt('G1.txt')
mat2 = np.loadtxt('gaussuan_beam.txt')
mat3 = np.loadtxt('gaussian.txt')

mat1.shape, mat2.shape, mat3.shape

from scipy.ndimage import gaussian_filter

mat4 = mat3 #gaussian_filter(mat3, 4)
fig,ax=plt.subplots(1,2,figsize=(10,5))
ax[0].imshow(mat3)
ax[1].imshow(mat4)

cc3 = gd.CubicalComplex(top_dimensional_cells = mat3)
cc3.compute_persistence()
H0_3 = cc3.persistence_intervals_in_dimension(0)
H1_3 = cc3.persistence_intervals_in_dimension(1)

cc4 = gd.CubicalComplex(top_dimensional_cells = mat4)
cc4.compute_persistence()
H0_4 = cc4.persistence_intervals_in_dimension(0)
H1_4 = cc4.persistence_intervals_in_dimension(1)

fig, ax = plt.subplots(2,2,figsize=(10,10))

gd.plot_persistence_barcode(axes=ax[0][0], persistence=H0_4)
gd.plot_persistence_diagram(axes=ax[0][1], persistence=H0_4)

gd.plot_persistence_barcode(axes=ax[1][0], persistence=H0_3)
gd.plot_persistence_diagram(axes=ax[1][1], persistence=H0_3)

fig, ax = plt.subplots(2,2,figsize=(10,10))

gd.plot_persistence_barcode(axes=ax[0][0], persistence=H1_4)
gd.plot_persistence_diagram(axes=ax[0][1], persistence=H1_4)

gd.plot_persistence_barcode(axes=ax[1][0], persistence=H1_3)
gd.plot_persistence_diagram(axes=ax[1][1], persistence=H1_3)

diags1_4 = DiagramSelector(use=True, point_type='finite').fit_transform([H1_4])
diags1_3 = DiagramSelector(use=True, point_type='finite').fit_transform([H1_3])

BC1_4 = BettiCurve(resolution=100).fit_transform(diags1_4)
BC1_3 = BettiCurve(resolution=100).fit_transform(diags1_3)

plt.plot(BC1_4[0], label='4')
plt.plot(BC1_3[0], label='3')
plt.legend()

diags0_4 = DiagramSelector(use=True, point_type='finite').fit_transform([H0_4])
diags0_3 = DiagramSelector(use=True, point_type='finite').fit_transform([H0_3])

BC0_4 = BettiCurve(resolution=100).fit_transform(diags0_4)
BC0_3 = BettiCurve(resolution=100).fit_transform(diags0_3)

plt.plot(BC0_4[0], label='4')
plt.plot(BC0_3[0], label='3')
plt.legend()

"""# Ripser:"""

from ripser import ripser
from persim import plot_diagrams

pc2.shape

diags = ripser(pc2)['dgms']
plot_diagrams(diags)

from ripser import lower_star_img as lsi

diag = lsi(mat3)
plot_diagrams(diag)